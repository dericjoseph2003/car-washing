# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

class TestPrice():
    def setup_method(self, method):
        # Setup Chrome options
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-notifications")
        
        # Initialize the Chrome driver
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.implicitly_wait(10)  # Set implicit wait time
        self.vars = {}
    
    def teardown_method(self, method):
        if hasattr(self, 'driver'):
            self.driver.quit()
    
    def wait_and_click(self, by, value, timeout=10):
        """Helper method to wait for and click an element"""
        try:
            element = WebDriverWait(self.driver, timeout).until(
                EC.element_to_be_clickable((by, value))
            )
            element.click()
            return True
        except TimeoutException:
            print(f"Timeout waiting for element: {value}")
            return False
        except Exception as e:
            print(f"Error clicking element {value}: {str(e)}")
            return False
    
    def test_price(self):
        try:
            # Navigate to the website
            print("Navigating to website...")
            self.driver.get("http://localhost/car-wash-website-template/index.php")
            
            # Wait for the page to load
            print("Waiting for login link...")
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.LINK_TEXT, "Login"))
            )
            
            # Click Login
            print("Clicking login link...")
            if not self.wait_and_click(By.LINK_TEXT, "Login"):
                pytest.fail("Failed to click Login link")
            
            # Wait for login form
            print("Waiting for login form...")
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "email"))
            )
            
            # Fill in login credentials
            print("Filling login credentials...")
            self.driver.find_element(By.NAME, "email").send_keys("admin@example.com")
            self.driver.find_element(By.NAME, "password").send_keys("Admin@123")
            
            # Click login button
            print("Clicking login button...")
            login_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
            )
            login_button.click()
            
            # Wait for dashboard to load
            print("Waiting for dashboard...")
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.LINK_TEXT, "Payment Details"))
            )
            
            # Navigate to Payment Details
            print("Navigating to Payment Details...")
            if not self.wait_and_click(By.LINK_TEXT, "Payment Details"):
                pytest.fail("Failed to click Payment Details link")
            
            # Navigate to Service Prices
            print("Navigating to Service Prices...")
            if not self.wait_and_click(By.LINK_TEXT, "Service Prices"):
                pytest.fail("Failed to click Service Prices link")
            
            # Update prices
            print("Updating prices...")
            price_inputs = [
                (By.NAME, "price", "700.00"),
                (By.CSS_SELECTOR, ".category-section:nth-child(2) tr:nth-child(2) > td:nth-child(2) .price-input", "900.00"),
                (By.CSS_SELECTOR, ".category-section:nth-child(3) tr:nth-child(1) > td:nth-child(2) .price-input", "1000.00")
            ]
            
            for locator_type, locator, price in price_inputs:
                print(f"Updating price for {locator}...")
                try:
                    element = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((locator_type, locator))
                    )
                    element.clear()
                    element.send_keys(price)
                    time.sleep(1)  # Small delay to ensure the input is processed
                except Exception as e:
                    print(f"Error updating price for {locator}: {str(e)}")
                    pytest.fail(f"Failed to update price for {locator}")
            
            # Verify the prices were updated
            print("Verifying price updates...")
            for locator_type, locator, expected_price in price_inputs:
                try:
                    element = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((locator_type, locator))
                    )
                    actual_price = element.get_attribute("value")
                    assert actual_price == expected_price, \
                        f"Price not updated correctly for {locator}. Expected: {expected_price}, Got: {actual_price}"
                except Exception as e:
                    print(f"Error verifying price for {locator}: {str(e)}")
                    pytest.fail(f"Failed to verify price for {locator}")
            
            print("Test completed successfully!")
            
        except Exception as e:
            print(f"Test failed with error: {str(e)}")
            # Take screenshot on failure
            self.driver.save_screenshot("test_failure.png")
            pytest.fail(f"Test failed: {str(e)}")
            
if __name__ == "__main__":
    pytest.main(["-v", __file__])
  
